package bartMachine;

import gnu.trove.list.array.TDoubleArrayList;

import java.util.ArrayList;

import org.apache.commons.math.MathException;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

/**
 * This portion of the code controls hyperparameters for the BART
 * algorithm as well as properties and transformations of the response variable.
 * 
 * @author Adam Kapelner and Justin Bleich
 */
public abstract class bartMachine_b_hyperparams extends bartMachine_a_base {

	/** The static field that controls the bounds on the transformed y variable which is between negative and positive this value */
	protected static final double YminAndYmaxHalfDiff = 0.5;
	
	/** A cached library of chi-squared with degrees of freedom nu plus n (used for Gibbs sampling the variance) */
	protected static double[] samps_chi_sq_df_eq_nu_plus_n;// = {1050.597,949.249,1060.371,1034.634,975.9,947.84,1066.57,950.081,922.874,1016.515,1078.311,942.217,1026.269,1012.496,1009.57,992.033,991.552,1029.16,943.652,1027.992,1019.318,994.351,1011.096,1038.26,1072.846,985.611,1022.357,1000.348,1008.861,1073.904,1034.55,1024.714,1054.95,1043.089,994.768,1001.222,922.286,985.502,1052.762,1000.491,1034.412,985.939,958.168,990.141,997.379,1025.086,1069.012,1062.765,1005.468,1035.036,993.388,1013.281,944.404,1026.351,1078.139,1027.684,979.357,1060.673,974.205,1012.461,949.79,997.32,970.673,938.278,1040.947,1060.123,1011.452,1028.974,1085.611,1017.912,994.851,993.431,1053.449,981.366,1059.099,1114.47,1034.498,954.31,1007.519,946.144,1050.034,911.161,963.409,966.006,1049.031,1078.557,1034.456,949.564,974.808,1013.105,977.174,971.407,1019.226,1023.795,1025.894,1098.083,993.23,1038.438,957.114,1026.797,972.732,1126.033,1028.448,1044.097,1013.463,1041.199,996.616,919.044,1030.862,1003.389,1040.952,963.313,956.687,968.755,979.251,983.696,956.752,944.736,1035.21,1086.386,986.506,1055.632,1160.084,1002.613,1040.364,1012.882,989.373,1042.573,945.857,963.79,954.737,996.378,1072.497,1027.852,980.709,958.389,1015.732,1084.483,973.847,972.634,971.246,1037.511,1041.207,1017.573,1017.73,947.395,968.555,955.509,988.478,1023.311,1102.966,1061.334,1085.718,1103.712,1079.009,1070.246,1010.893,1043.442,990.903,1042.755,1113.572,981.67,993.061,1067.509,975.328,966.319,1045.742,1120.973,1025.219,1027.144,1051.004,945.499,1065.672,985.304,1041.507,1052.705,993.93,987.871,990.818,970.009,1023.283,982.528,1066.054,1007.104,1050.964,1041.867,936.924,1057.347,1001.834,991.908,1058.522,1015.553,952.206,1001.405,1010.866,937.282,1031.324,1018.62,1007.429,957.312,985.911,1063.938,1041.063,1051.467,953.966,995.671,1034.683,993.793,1031.588,1005.496,1017.121,952.698,1005.834,994.176,1032.126,1091.476,975.28,1059.238,1036.52,990.037,1004.079,1026.237,1054.891,964.371,1074.991,1025.675,1021.758,1026.895,996.343,951.811,940.212,974.669,1029.758,1069.028,1030.171,983.958,1034.804,969.36,974.772,949.196,866.338,965.924,979.911,971.378,1024.777,962.516,991.6,1078.009,938.918,977.042,982.289,931.521,964.118,960.757,1045.578,1030.201,998.957,978.26,1118.651,959.704,936.025,976.138,1049.884,997.213,951.214,1052.716,1018.418,969.839,936.419,956.386,1037.869,1069.677,967.486,1055.218,962.102,1058.63,1047.885,949.65,932.67,1019.748,994.501,1016.993,1000.834,1031.955,997.726,994.813,987.604,1038.955,985.082,954.711,1067.698,1035.742,1056.725,1071.887,1011.496,922.842,1024.185,1034.343,976.72,1003.262,1031.646,1019.308,1002.463,944.345,1003.196,958.376,969.263,937.543,1023.437,1105.528,1059.515,979.67,1019.445,1031.071,1035.317,986.736,1132.816,945.466,949.463,983.029,1000.321,976.546,999.449,1046.53,962.676,1037.342,1005.071,950.402,1030.601,1049.482,1038.543,1087.922,1101.853,985.758,1009.57,984.747,1026.722,1043.059,994.534,954.609,1031.769,939.426,986.525,1020.461,922.27,1018.357,981.414,1008.865,1030.908,1008.191,1005.111,971.964,1010.59,1052.192,1051.19,1068.104,1042.751,989.524,963.214,1049.709,979.814,1022.379,1027.357,940.855,942.914,975.638,999.02,1040.98,995.998,997.12,1074.232,1038.17,1074.269,955.03,932.636,998.631,1005.168,990.892,927.68,987.938,976.089,1066.396,954.498,1011.759,945.141,1091.023,977.727,973.202,986.733,1007.401,1083.347,992.796,1021.754,1025.584,1055.09,967.926,1046.241,1048.204,1039.18,1012.312,1014.219,1028.11,926.504,1065.078,981.27,942.921,922.148,905.066,972.937,1036.95,977.462,989.526,1048.457,895.282,1025.446,1033.407,1012.672,1069.761,1001.442,935.624,943.667,990.527,937.77,1000.144,1006.472,935.74,940.17,1040.316,984.216,1055.902,1042.252,981.954,977.998,1051.486,966.888,1031.948,1065.222,1064.329,981.948,967.795,1052.472,1031.188,996.57,1003.233,969.847,938.8,944.985,1099.969,977.257,1016.231,970.701,988.568,1038.126,1063.328,1054.965,1006.931,999.683,986.291,973.422,994.383,1003.132,1021.084,1056.883,1006.137,1009.371,1011.388,1033.008,1010.423,1022.796,1046.722,991.097,1015.4,995.746,1021.309,1068.761,1057.775,984.143,914.799,1012.964,1001.879,973.236,975.953,1077.275,978.998,1030.782,1088.672,1052.765,1056.37,1006.443,975.588,997.075,946.584,1005.789,935.553,1054.167,1006.947,980.084,986.577,1063.056,1064.351};
	/** The number of samples in the cached library of chi-squared values */
	protected static int samps_chi_sq_df_eq_nu_plus_n_length;// = 500;
	/** A cached library of standard normal values (used for Gibbs sampling the posterior means of the terminal nodes) */
	protected static double[] samps_std_normal;// = {1.68735314817084, -0.444910557777602, -1.01574644305095, -1.23529972526312, 1.66505950389773, -0.217347016602924, 0.202897497145805, -1.15277675955004, 1.45343897213435, -2.02788640308338, -0.267236460158298, 1.0795523009817, -0.353039864994548, -0.511976517819192, 0.0324167140906128, -0.762246720528266, -0.186211494919961, 1.71878199153221, 1.07619487325387, -0.46036995494867, 2.63221455291021, -1.20198317240418, -1.18674454708379, 0.729933779624093, 2.32535852625195, -1.51125550382843, 0.261090225524387, -1.02813430298972, 0.130034420827244, 1.22040694501122, 0.232628439306083, -1.15599917488998, -1.72166239870019, -0.326349967965231, -0.164219002684718, 0.211424912857625, -0.677145955353026, -0.464869099711132, 1.08725089469464, -0.938899758281471, -0.0657625075052816, 0.428909340491499, 1.00486897712219, 0.240646131044336, -0.654404103575109, -0.695284333779822, 0.0464980885562565, -1.29531486610627, -1.60659029848232, -1.60621975588351, -1.65880837365252, -1.35264621245114, 0.610854607139223, -0.134975416651234, -0.827800264615576, -0.382044254119908, -1.67886724466066, 0.114104242463861, -0.365660239645388, 1.6586229449491, 0.564957317424773, -0.28751231676147, 1.37783110372125, -0.861637738544114, -0.247050507313549, 0.386618463593006, 0.268412881797876, 0.864790754792591, -1.04934032122019, -0.567135694695352, -0.60639619137776, 0.285961923946727, 2.52009744583603, -0.995458790026452, -0.0486865807224736, 0.667260291418298, 0.728881949800404, 0.600086707444693, -1.10771969560669, -0.7246165117638, -0.605652988673694, -0.723536343625817, -1.51554709283401, 0.0153640779419458, 0.906492357582404, 1.53127269129535, 1.15714054214229, -0.884012283212003, -0.764887017893891, -0.912065945396406, 0.701267662683593, -0.726283742093813, -0.126267972169618, -0.598813896702432, -0.163845551202672, -0.927013462714506, 1.57372805724866, 0.740753971062386, 1.18525803071727, -1.60421906260442, 1.79917385247218, 0.0605436754224443, -0.655224036711219, 0.477210349259086, 0.239030434410522, -1.68307018931784, 0.180486593866061, -0.000880037786394478, -0.657181144885182, -0.0515470775131718, 0.0442176703394913, -0.109990897837859, 0.538855025867814, -0.820717360331034, -0.98964275356069, -0.47474325360282, -1.1443236478467, 1.04541787535022, 1.05213799847619, -0.0868206312805969, 0.0282276877166018, -0.548056332805544, 0.0280805931815228, 0.691980380628971, -0.553226185169585, -0.540479703000529, 0.736840784612928, 0.817883135506739, 0.448027912893909, 0.0458201770141353, -0.199469243674512, -0.371206082295428, 0.533226573931738, -0.978568711319853, 1.48386276303294, -0.541050453615206, -2.40769560689326, 0.313697309383881, -0.494102213785987, -0.454801330721508, -0.989391819779931, -1.79846716038626, -0.547445072642582, 0.49363455397508, 0.45766454924536, -0.0157824190214411, -0.261836226678728, 1.01986160807483, -0.165274988888192, -0.767469158366734, 0.0324215177646984, -0.285287123217708, -0.981972789823996, 0.10191313595098, -0.0479741105148136, -0.364041369094426, -0.64615119979214, -1.78490776981152, 0.191196729005396, 0.391133469791229, -0.127409250846086, -0.679195368845398, 1.31208111467078, 0.0638999390734125, -0.498498891031731, -0.00603546722675072, -1.23468715133413, -1.22281992106542, -1.44618046898492, -0.507311438636604, 0.73687732580877, -0.370319630147931, 0.583355355478584, -0.338069292048135, -1.08582221563277, 1.69488948384401, -0.0678176142904881, 0.084208434839099, 0.270405361830902, -0.345357274322275, -0.483553773680941, 0.372249127241899, -0.181021415648216, -1.69854019298107, 1.42201099577635, -1.02486336532005, -0.0739797973227061, 0.0747366495921378, -1.35613926289001, 0.130055652810493, 0.0328627362337665, -0.654061336588313, 1.34633270212852, 0.515016685768186, 0.648230723379423, -1.1226446820052, 0.472047488366009, 1.27043389553993, -0.178617011513737, -1.01443918059332, 0.108956270682212, 0.323452188534886, -0.589138764436758, -0.302512377238119, 1.69365985174245, 0.134021398485524, -0.628049595857574, -0.217967317157526, -1.06954227692139, -0.658411125616374, 1.48055129957949, 0.46385758723612, -1.12151921464456, 1.01253668581507, 0.788403114193161, 0.88708663379775, -1.50419538248464, 1.67951640381625, -0.988036020657836, -0.80571891989692, 0.010475096513439, 0.50336436748765, 0.528476114457015, -0.595328527276442, -0.188035816516277, 1.19310710461377, -0.709433444199444, 1.47062071846226, -0.617201223072023, 0.322773683189391, 0.681277155159144, -0.201069631556465, 2.11900065223911, -0.615509137982473, 0.604155107352231, -1.47305315007424, -0.589442432036494, -0.553997831818672, -0.205425713895076, 0.939811873164624, -0.219050221598709, 1.7105530620785, -1.40514744568316, 0.375808924667616, 1.21146579191576, -0.882207340690433, 0.123452086818663, -0.502790288685832, 0.293732963151202, -0.87276371890189, -1.38964213678777, 1.0765205127353, -0.668357605836804, -2.00112564151562, -0.632295098109308, 0.145078130053206, -1.09035760311003, 0.935187389657185, 3.5166502810062, -1.00290347826468, -0.390259502991752, -0.593337148962085, 0.245632388787966, 0.876065828552118, -1.05825417719608, 0.595687534971721, -0.197639775949171, 2.85620188111623, -0.245086749661611, -0.383380962559251, -0.455030739677492, 0.852510360718742, -0.521972066456059, -0.531548753676128, 1.08905057472387, 1.29328077273319, -0.148791168760444, -1.02713874300718, -1.50173736422572, 0.0605465403405431, -0.897901056098128, 0.175865036382552, -2.25818911630684, 0.636921861433502, -1.87824512420509, 0.721465564738846, 0.517243880270693, 1.06903155655321, -0.0139929290044932, -0.103980964134874, -0.712571692354049, 2.27551008849665, 0.875456117279408, 0.747068984205433, -1.33361545606961, 0.572364271948511, 0.595040344466473, 0.0565334046555808, -1.21985307591964, 0.223101660265357, -0.559318582066793, -1.11187843552702, -0.42092020414504, -0.163920323504733, 1.27773200115194, -0.518757583188076, 0.371010824717897, -0.736908143793174, -0.402917353465649, -1.59629240259608, 0.183085955668653, -0.375768044033167, 0.781777871894688, -0.303115168391483, 0.0423654081636594, -0.886422596411879, 0.212423094728782, 0.0828794571570571, 0.91909190474418, 0.16257198947094, -0.269804842366689, 1.56399370219186, 0.00242883399086761, -0.0085032045337028, 2.85246294204887, -0.280980486926061, -0.811886548838849, -0.262347648463121, -1.89269655617187, 1.05935733286268, -0.258683368385211, 0.332918669411464, 0.113980396662717, -1.09050699402331, 0.477067138128562, -0.287100482391397, 0.748449498131305, -0.383253927036543, 1.54952995260704, -1.23000378439822, 0.871957094083811, -0.527946896451088, -1.33416333250679, -1.56772421188695, 1.98341737132481, 0.642557956028257, -0.983129938472842, -0.0307117501719833, -0.798526769523682, -1.24906595178462, 1.00894212642036, -0.0847759183993153, -0.543574173498525, 0.631089107242137, 1.12454490405699, -0.875250073675429, -0.377721650108984, -0.306814645861413, 1.81902506716217, -0.611806812780607, 1.54720937068998, 1.1531525374595, 0.961776625736216, -0.782134069577865, -0.135305744495071, -0.149204743389108, -0.210388961133886, -0.807520143793284, -0.11946814225897, -0.321076226227115, 0.260279715071925, -0.525188708922196, 0.879420395433948, 0.40150714444431, -0.913298377988331, 0.00814511210136953, -1.57171191294679, -0.866783734591104, -0.231535886286616, -1.15605964448995, 1.03276894129727, -0.560434223165741, 0.765893738057223, 1.13383413712434, 1.42321339927086, -1.05440261993384, -0.721680582588624, 2.36846327783637, -1.1963994877938, 0.735794134853658, 2.07152091420206, 0.34230841093649, -0.602301931718463, -0.361118484436775, 0.91984236079989, -0.467807974782495, -0.187639121190767, -0.868562270877314, 1.28098677103503, -0.123677827046468, 0.881892739819439, -2.7469690681395, -0.187924798642913, -0.756544897189139, -2.02306167412184, -1.6839541717365, 0.57609158260397, 0.705653986323556, 0.30434360885245, 0.0142379840110398, 1.23730243982528, -0.592992664019526, 0.76681547380466, 1.43000463410148, 0.498267551173462, -1.30117734510301, -0.275972733805002, 0.6421638926601, 1.98508628640271, -0.495256264862567, -1.89499862350925, 0.46105838445666, 1.64452976849979, -0.83772958451588, -0.314962168479717, 0.406996326352449, 0.988762064560367, 0.893640471918567, -0.060132268759968, 0.797470840936751, -0.478259671551361, -0.970786036958277, -0.408511774719201, -1.67264434154929, 0.95391957950955, -0.822653270861047, -1.19303680395676, 1.30196210163741, -0.156303815500192, -0.785163658324787, 0.805975079265687, -1.3765257736002, -1.53698355895264, -1.40118327657908, -0.577167444587661, 1.41834387919141, -0.838131276651258, -0.0381389020567237, -0.8498579962961, 2.11298636121118, 1.26888384760506, 1.59395071738851, -0.668746334593958, -0.583475659213315, -1.064709699548, -0.907832766682632, 3.09836781153805, -1.11726332522263, 0.128100396793381, 1.25128442945845, -0.334311110185929, 0.775496650482245, 0.145892526940115, 1.51389521325315, -0.179412203982341, 1.33678826662615, 0.70925835229209, -0.00377663101447018, -0.32615464999356, -1.21043588650023, 0.233542212820561, -0.380984190310182, 0.621664622516034, -0.110702659125204, 0.148166074297944, -0.460075322889873, -0.890828708644614, -1.02074236258281, 0.153624974407052, 1.2915117967028, -0.0549953093670552, -0.484517180573288, 0.404030697762505, 1.39004826165286, -0.592717258867787, 1.38687013255084, 0.624690883946397, 0.645845955000952, 1.22994166693548, 0.317372446858872, 1.17038896143217, 0.230309108182562, 0.94618449022311, -0.911927040004271, 0.79792754135142, -1.08439612185251, -1.48103952022006, 0.617572817054316, 1.22496340400966, 0.0851890788933952, -0.379349565336826, -0.846444255816211, -0.180138641271461, 0.198374407919941, -0.720392548689354, 0.985204937261997, -2.18348082255539, 0.685154691873701, 0.315407594836271, -0.558989106397838, -0.674299290386468, 0.156491592243344, 1.52630153304585, 0.846464105722962, 0.934610277911744, 0.686275503893869, -0.944648763623139, 1.3925899112709, -0.605278919799188, 0.774467956414185, 0.428400067704701, 2.68475879580067, 0.784461823234396, 1.10234799800916, 1.54739804461409, -0.718215228905284, -0.630302122560195, -0.934359925146205, 0.303542715789551, -0.293175075844889, -0.298229695690515, -1.30482300143497, -0.480080733009919, -0.825779313174317, 2.31135743852636, -1.52357340305947, -1.64405840520343, 1.68071165219341, 0.0462500800950408, 0.657630115119155, -1.80431107218939, -0.374191675667633, 1.22042710386283, 0.313035390721923, 0.734192150159058, 1.46980654957081, 0.0987402393229203, 0.322167448829319, 0.240131356219157, -0.352954064852596, 0.688315654629946, -0.129425174514192, -1.87042626327216, -0.276341931949997, -0.178754646603177, 0.585034704399849, -0.690673398678924, -0.125019164944318, -1.8753886262818, 0.100685278016874, 1.33538581727619, 0.145230786420073, -1.14953900050547, -0.275362931421276, 1.2893113651037, -0.105194875037359, -0.425048268334579, -0.784153096281819, 1.59338700681888, -0.968516734922509, -3.19449998411996, 0.589082592685992, 0.39095881566061, -1.24973388032279, -0.224638367866996, 0.354543891328227, 0.710618096930302, 0.710207080134041, -0.479427076041401, -1.04825713782729, 0.959075444143674, 1.19895124120085, -0.0143201989543357, 1.2258936595499, -0.627222127394801, 0.990688110510241, 1.73526567825401, 1.31483471438897, -1.73969850369556, -0.659153115413141, 1.03948998478571, -0.312583181579645, -1.29593458207878, -0.905966795204727, -0.305386259464374, -2.02032484435611, 0.176374285602108, -0.948981392015035, -1.28378294546401, -1.14430180372312, 1.28796391100975, -1.55481880270947, 0.295635349079617, -1.22936759633331, -0.17908989794121, -0.0844741616189034, -0.274367416675028, 0.36855208720033, 0.398465620995993, -0.239315095490773, 0.807621874151524, 0.264422386724209, -1.52357924503549, 1.27711276621762, -1.21597115954019, -1.23408663253487, -0.544658638923835, 1.43099034459663, -1.16777069034934, -0.71580489679377, 1.83033611229891, -1.89427799038218, 0.359735244878567, 0.864486526197775, -0.0420655736767464, -1.23072404461989, -1.03215741381239, 0.574937652580627, 0.636737465686644, -0.893768087545503, -0.0242230067866355, 0.778775716857437, -0.414326481350278, -1.06441270517089, 0.924333823768664, -1.61597463209243, -0.0746376072910136, 0.0218859449890031, 0.82891153700138, 0.925179040301985, 0.252753008238279, -0.258779326216691, -1.61634855145405, -1.49722222515794, -1.13322081926657, 1.22829006669937, -1.1271943319018, -1.08454993067519, -0.677745898075497, -1.26914221048871, -1.59753666797504, -0.159512638354768, -0.0719155899226276, -1.08534277278442, 0.913976831092412, -0.0397615774226814, -0.103828295575522, -0.657563076260608, 0.591759866044731, 0.585165097517722, -0.239630817236287, 0.692918811043202, 1.76429799823862, -0.166403421368371, 1.48937510791418, 0.568868491173289, 0.345634896138494, -0.493405096226176, -1.32575703736559, -0.51756133118327, 0.67634036052087, -0.839301113357522, 1.2713421990097, 0.241348636539026, -3.68785439059885, 2.21594576431351, -1.46372646927011, -0.185968018131275, 0.247028697219919, -0.036348936694783, -0.80623084464792, -0.428947589590481, 0.823971048813832, 0.20261750836091, -0.888571593383334, -0.467952757570228, -0.462793680040876, -0.788856914741067, 1.34305676561296, 1.31347990773807, -0.752464543590909, -0.536739404194182, -0.677009008959236, -0.937812301557162, -0.423493697910085, 0.485890177964632, -0.217948955210801, 0.644775112836099, -1.53260748072646, -0.778705940658963, 0.155838342570639, -0.524277273979183, 0.334528044073346, -2.21407954371816, 1.07877213618902, 1.61804339256404, 0.286985776813829, 0.721095109387764, 0.204529447072239, 0.133206381172506, 0.878223148291148, 0.157251218982125, -1.22363404875235, 0.206744403415515, 1.51043720807135, 0.0190529292578991, -0.878579846309318, 0.973073845232868, 1.049218161429, -0.26700939710261, 0.756423491131752, 0.046403436286077, -0.486450209932419, 0.255507971176291, -0.470965489224083, 0.00861904846197636, 0.518657844095602, 1.79634139666502, -0.132647097276783, 1.25438174410812, 0.753425531594117, 0.693300687571491, 0.197313456333741, -0.605906098276346, 0.376443614295213, 0.753919872669219, -2.07634331831506, -0.587042932100447, 0.714549499607564, 0.895292360531685, 1.10965965378921, -0.230851828587151, -0.587239111684277, -0.671923007436761, 0.703634871989605, 0.679667042834558, -1.4740034934737, -1.2783378713096, 2.10351251749179, -1.43995070331185, 1.0864685333642, 0.353159604197382, -0.20488090475467, 1.08228807178819, -1.00064684388014, -0.357625379780522, -1.00670788912698, -0.205859678810939, 0.887322371515227, 1.00270778400067, -0.573257904582501, -1.4683905226244, 0.753103836310855, -0.935148075284692, -0.601553791373255, 0.757734456454978, 0.689866057509446, 0.32592602084167, 1.53852738415177, 0.0962068129574443, -0.723384556808773, 0.531642050055789, -0.668722076016437, 0.244142026917636, -0.779432996462019, -1.16304113069173, -1.55071478743162, 1.46168521681828, 1.34592887273953, -0.842738311854484, -0.428818694016823, 1.02569998081276, -1.10605196879664, 1.10198645092665, 1.42513727575678, 0.53589236554719, 1.00307906151453, 1.03599274429821, 3.21732534347306, 0.458551785979854, 0.0508729585991429, 0.762652382481703, 0.579874457777816, 0.927687214721911, 0.516876220384116, 1.18655263846738, -1.08549043454121, -0.159201052264869, 0.28206528022585, -1.47070000965601, 1.62204960978516, 0.54366939777309, 1.03132713431855, -2.10318556322841, 0.972612403282934, 1.68254202516764, -0.237393397109801, -0.731773532397605, -0.341072308437966, -1.18432028763883, -1.6299395521426, 0.0099336076073523, 0.713438669371145, -0.33950423611388, -2.30179024363372, -0.611739583401703, -3.11068649550846, 0.0126474207119549, -1.11673094510596, 0.807050614899971, 0.170494688201089, -0.637037594658805, -0.186570598156716, -1.67113753156649, -0.497927047747853, -0.318157541188721, 0.920717466784368, 0.592745046772766, -0.0189273506575972, 0.0821090906654834, 1.15860958348221, 0.231255401239555, -0.0357413071105929, -0.737585754985121, 1.45586902845132, -0.559852547153121, -0.55202721722964, 0.927949113887658, -0.214756466707769, 0.480978443877601, -1.1583385569666, -0.549580232607457, -0.549518274500649, 0.24132051109758, 1.09156883897745, 2.8332795664951, 0.728833688382595, -0.0119398048996323, 0.254287500722409, 0.0627581213445264, -0.109807355833478, -1.21550720569358, -0.425224369656312, -1.35893250464367, -0.449721737748941, -1.21985283073164, 1.00917770863965, 0.23220358463632, 0.366016253551683, -1.07615409314515, 1.51336775698844, 0.497866063497182, -0.0101169051549631, -1.58510578545623, 2.06064436935077, 0.868164280130582, -0.243493625207376, -0.162665163232432, 0.459884878211912, 0.982731466635455, 1.80181784040222, -0.845320092614703, 0.328661187930586, -0.0378888696189792, 0.167856037211757, 0.495943979702333, -0.233049604233485, -0.347524560606795, 0.807085956159625, -0.861853380839786, -0.937339016810423, 2.02275748710565, -1.48980007949269, 0.916913287887501, -0.610928548401561, 1.18691671261507, 1.65539395387344, -1.10678983153521, 1.23368898358904, -0.40642271452782, 1.66464462465117, 0.556616453393299, -0.656804771704099, 0.786525096842244, 0.546639299053528, 1.60101574790266, -0.0189930406843498, -2.33183893282302, -0.064183803077976, -0.0716588382973201, 1.56786843469315, -0.768490834659959, 1.50251316861945, 1.02803875268925, -0.176347459333253, 0.436980583032935, 1.1798949847216, -1.42657854489542, 1.68875082599775, -0.476042541390408, 0.248251380350038, -0.74735967899607, 1.30807016099901, -1.31529513146544, 1.30202285934235, 0.221711447296159, -0.668122591507492, 1.07083687201453, 1.6180098653389, -0.071312313728832, -0.9298123577823, -1.94323035444819, -1.14933731500613, 0.990922950769031, -0.667802146572849, -1.5762466419425, -0.290271955508946, 0.669922280272166, -0.132903386463191, 1.18581867866334, 2.00587824087804, -0.988605019050622, 0.109749575456403, 0.762782222450985, 0.558975550668302, -0.396872341322575, -2.53050756743326, 0.629808573268617, 0.927722095641719, -1.00591272320778, 1.43619393576094, -0.108877947187792, 0.175320165888563, -0.960379153790069, -0.153513334970004, -1.25204705485406, 0.110690344691871, -1.85804858580497, 0.0197582024748512, -0.549101226424596, 0.471019304819184, 0.430484018040887, -1.35686754101772, 0.38571250890353, 0.340831709566483, 0.324994818647284, -0.317894847546759, -0.704159849003376, 1.79623220769393, 0.41381132119729, -0.119558541225585, 1.68369606759552, -0.834903350634387, 0.595151320808991, 0.387586467103538, 1.21911880068817, -1.71783987781604, -0.586187169795073, 0.583425757787186, -0.481195228802415, -0.14737565482379, -2.18950653957228, -1.07014548451201, 0.23539366844849, -0.141694938026064, -0.281500211884372, 1.0782300512054, 0.0327930260281479, 1.44082532294668, -0.434265289426712, -0.0991358488486809, 0.645742929868418, 1.00023755141482, -0.345301026432564, 0.262885484125625, -0.372293374675252, 0.135322472724731, 0.445000462292225, 0.39011877801886, 0.068866981444856, -0.509713650597625, 1.53375711687784, 1.11841397436893, 0.0782375509983361, -0.760807840553138, -0.331825681565317, -0.898211919725003, 0.95443527232635, -0.679058725564729, 0.96216569317776};
	/** The number of samples in the cached library of standard normal values */
	protected static int samps_std_normal_length;// = 1000;
	
	/** the center of the prior of the terminal node prediction distribution */
	protected double hyper_mu_mu;
	/** the variance of the prior of the terminal node prediction distribution */
	protected double hyper_sigsq_mu;
	/** half the shape parameter and half the multiplicand of the scale parameter of the inverse gamma prior on the variance */
	protected double hyper_nu = 3.0;
	/** the multiplier of the scale parameter of the inverse gamma prior on the variance */
	protected double hyper_lambda;
	/** this controls where to set <code>hyper_sigsq_mu</code> by forcing the variance to be this number of standard deviations on the normal CDF */
	protected double hyper_k = 2.0;
	/** At a fixed <code>hyper_nu</code>, this controls where to set <code>hyper_lambda</code> by forcing q proportion to be at that value in the inverse gamma CDF */
	protected double hyper_q = 0.9;
		
	/** A hyperparameter that controls how easy it is to grow new nodes in a tree independent of depth */
	protected double alpha = 0.95;
	/** A hyperparameter that controls how easy it is to grow new nodes in a tree dependent on depth which makes it more difficult as the tree gets deeper */
	protected double beta = 2;
	/** the minimum of the response variable on its original scale */
	protected double y_min;
	/** the maximum of the response variable on its original scale */
	protected double y_max;
	/** the minimum of the response variable on its original scale */
	protected double y_range_sq;
	/** the sample variance of the response variable on its original scale */
	protected Double sample_var_y;
		
	/** A wrapper to set data which also calculates hyperparameters and statistics about the repsonse variable */
	public void setData(ArrayList<double[]> X_y){
		super.setData(X_y);
		calculateHyperparameters();	
	}
	
	/** Computes <code>hyper_sigsq_mu</code> and <code>hyper_lambda</code>. */
	protected void calculateHyperparameters() {
		hyper_mu_mu = 0;
		hyper_sigsq_mu = Math.pow(YminAndYmaxHalfDiff / (hyper_k * Math.sqrt(num_trees)), 2);
		
		if (sample_var_y == null){
			sample_var_y = StatToolbox.sample_variance(y_trans);
		}

		//calculate lambda from q
		double ten_pctile_chisq_df_hyper_nu = 0;		
		ChiSquaredDistributionImpl chi_sq_dist = new ChiSquaredDistributionImpl(hyper_nu);
		try {
			ten_pctile_chisq_df_hyper_nu = chi_sq_dist.inverseCumulativeProbability(1 - hyper_q);
		} catch (MathException e) {
			System.err.println("Could not calculate inverse cum prob density for chi sq df = " + hyper_nu + " with q = " + hyper_q);
			System.exit(0);
		}

		hyper_lambda = ten_pctile_chisq_df_hyper_nu / hyper_nu * sample_var_y;
	}	
	
	/** Computes the transformed y variable using the procedure outlined in the following paper:
	 *  
	 *  @see HA Chipman, EI George, and RE McCulloch. BART: Bayesian Additive Regressive Trees. The Annals of Applied Statistics, 4(1): 266-298, 2010.
	 */
	protected void transformResponseVariable() {
		super.transformResponseVariable();
		y_min = StatToolbox.sample_minimum(y_orig);
		y_max = StatToolbox.sample_maximum(y_orig);
		y_range_sq = Math.pow(y_max - y_min, 2);
	
		for (int i = 0; i < n; i++){
			y_trans[i] = transform_y(y_orig[i]);
		}
	}

	/**
	 * Transforms a response value on the original scale to the transformed scale
	 * 
	 * @param y_i	The original response value
	 * @return		The transformed response value
	 */
	public double transform_y(double y_i){
		return (y_i - y_min) / (y_max - y_min) - YminAndYmaxHalfDiff;
	}
	
	/**
	 * Untransforms a vector of response value on the transformed scale back to the original scale
	 * 
	 * @param yt	The transformed response values
	 * @return		The original response values
	 */
	public double[] un_transform_y(double[] yt){
		double[] y = new double[yt.length];
		for (int i = 0; i < yt.length; i++){
			y[i] = un_transform_y(yt[i]);
		}
		return y;
	}
	
	/**
	 * Untransforms a response value on the transformed scale back to the original scale
	 * 
	 * @param yt_i	The transformed response value
	 * @return		The original response value
	 */
	public double un_transform_y(double yt_i){
		return (yt_i + YminAndYmaxHalfDiff) * (y_max - y_min) + y_min;
	}
	
	/**
	 * Untransforms a response value on the transformed scale back to the original scale
	 * 
	 * @param yt_i	The transformed response value
	 * @return		The original response value
	 */
	public double un_transform_e(double e_i_transformed){
		return e_i_transformed * (y_max - y_min);
	}	
	
	/**
	 * Untransforms a response value on the transformed scale back to the original scale
	 * 
	 * @param yt_i	The transformed response value
	 * @return		The original response value
	 */
	public double un_transform_y(Double yt_i){
		if (yt_i == null){
			return -9999999;
		}
		return un_transform_y((double)yt_i);
	}	
	
	/**
	 * Untransforms a variance value on the transformed scale back to the original scale
	 * 
	 * @param sigsq_t_i		The transformed variance value
	 * @return				The original variance value
	 */
	public double un_transform_sigsq(double sigsq_t_i){
		//Based on the following elementary calculation: 
		//Var[y^t] = Var[y / R_y] = 1/R_y^2 Var[y]
		return sigsq_t_i * y_range_sq;
	}
	
	/**
	 * Transforms a variance value on the original scale to the transformed scale
	 * 
	 * @param sigsq_t_i		The original variance value
	 * @return				The transformed variance value
	 */
	public double transform_sigsq(double sigsq_t_i){
        return sigsq_t_i / y_range_sq;
	} 
	
	/**
	 * Transforms a variance value on the original scale to the transformed scale
	 * 
	 * @param sigsq_t_i		The original variance value
	 * @return				The transformed variance value
	 */
	public double[] transform_sigsq(double[] sigsq_i){
		double[] sigsq_t_is = new double[sigsq_i.length];
		for (int i = 0; i < sigsq_t_is.length; i++){
			sigsq_t_is[i] = transform_sigsq(sigsq_i[i]);
		}
		return sigsq_t_is;
	} 	
	
	/**
	 * Untransforms many variance values on the transformed scale back to the original scale
	 * 
	 * @param sigsq_t_is	The transformed variance values
	 * @return				The original variance values
	 */
	public double[] un_transform_sigsq(double[] sigsq_t_is){
		double[] sigsq_is = new double[sigsq_t_is.length];
		for (int i = 0; i < sigsq_t_is.length; i++){
			sigsq_is[i] = un_transform_sigsq(sigsq_t_is[i]);
		}
		return sigsq_is;
	}			
	
	/**
	 * Untransforms a response value on the transformed scale back to the original scale and rounds to one decimal digit
	 * 
	 * @param yt_i	The transformed response value
	 * @return		The original response value rounded to one decimal digit
	 */
	public double un_transform_y_and_round(double yt_i){
		return Double.parseDouble(TreeArrayIllustration.one_digit_format.format((yt_i + YminAndYmaxHalfDiff) * (y_max - y_min) + y_min));
	}

	/**
	 * Untransforms many response values on the transformed scale back to the original scale and rounds them to one decimal digit
	 * 
	 * @param yt	The transformed response values
	 * @return		The original response values rounded to one decimal digit
	 */
	public double[] un_transform_y_and_round(double[] yt){
		double[] y = new double[yt.length];
		for (int i = 0; i < yt.length; i++){
			y[i] = un_transform_y_and_round(yt[i]);
		}
		return y;
	}		

	/**
	 * Untransforms many response values on the transformed scale back to the original scale and rounds them to one decimal digit
	 * 
	 * @param yt	The transformed response values
	 * @return		The original response values rounded to one decimal digit
	 */
	public double[] un_transform_y_and_round(TDoubleArrayList yt){
		return un_transform_y_and_round(yt.toArray());
	}	
	
	public void setK(double hyper_k) {
		this.hyper_k = hyper_k;
	}

	public void setQ(double hyper_q) {
		this.hyper_q = hyper_q;
	}

	public void setNu(double hyper_nu) {
		this.hyper_nu = hyper_nu;
	}
		
	public void setAlpha(double alpha){
		this.alpha = alpha;
	}
	
	public void setBeta(double beta){
		this.beta = beta;
	}
	
	public double getHyper_mu_mu() {
		return hyper_mu_mu;
	}

	public double getHyper_sigsq_mu() {
		return hyper_sigsq_mu;
	}

	public double getHyper_nu() {
		return hyper_nu;
	}

	public double getHyper_lambda() {
		return hyper_lambda;
	}

	public double getY_min() {
		return y_min;
	}

	public double getY_max() {
		return y_max;
	}

	public double getY_range_sq() {
		return y_range_sq;
	}
}
